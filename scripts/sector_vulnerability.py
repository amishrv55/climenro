import os
import pandas as pd

# List of vulnerability sectors and their associated file names
SECTOR_FILES = {
    "Infrastructure": "infrastructure.csv",
    "Ecosystem": "ecosystems.csv",
    "Water": "water.csv",
    "Food": "food.csv",
    "Health": "health.csv",
    "Habitat": "habitat.csv"
}

BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data", "nd_gain", "vulnerability"))


def load_sector_vulnerability_data():
    """
    Loads all sector vulnerability CSVs and returns a single long-format dataframe.
    Columns: ['ISO3', 'Name', 'year', 'score', 'sector']
    """
    all_dfs = []

    for sector, filename in SECTOR_FILES.items():
        path = os.path.join(BASE_PATH, filename)
        if not os.path.exists(path):
            print(f"Warning: Missing file for {sector}: {path}")
            continue

        df = pd.read_csv(path)
        df_long = df.melt(id_vars=["ISO3", "Name"], var_name="year", value_name="score")
        df_long["year"] = df_long["year"].astype(int)
        df_long["sector"] = sector
        all_dfs.append(df_long)

    if not all_dfs:
        return pd.DataFrame(columns=["ISO3", "Name", "year", "score", "sector"])

    combined = pd.concat(all_dfs, ignore_index=True)
    return combined


def get_sector_vulnerability_by_country(df, country_name):
    """
    Filters the vulnerability data for a specific country.
    Returns a DataFrame with year, sector, and score.
    """
    return df[df["Name"] == country_name].copy()


def get_latest_sector_scores(df):
    """
    Returns the latest year sector vulnerability score for each country.
    Useful for choropleth mapping or country comparison.
    """
    latest_year = df["year"].max()
    return df[df["year"] == latest_year]
